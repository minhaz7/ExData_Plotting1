4+$
4+5
5
q()
4+4
a<-available.packages()
head(rownames(a),3)
install.packages("slidify")
4+$
3+4
install.packages("slidify")
install.packages('devtools')
install_github("slidify", "ramnathv")
library("devtools")
install_github("slidify", "ramnathv")
install.packages('ggplot2')
library(ggplot2)
search()
install.packages('KernSmooth')
library(KernSmooth)
library(swirl)
swirl()
my_matrix2 <- matrix(1:20, 3,2)
my_matrix2 <- matrix(1:20, 4,5)
identical(my_matrix2,my_matrix)
identical(my_matrix,my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-("patient", "age", "weight", "bp", "rating", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
trainData <- read.table("data/train/X_train.txt")
setwd("C:\\Users\\abbuma\\Desktop\\Coursera_Getting_and_Cleaning_Data_Peer_Assesment-master")
trainData <- read.table("data/train/X_train.txt")
trainLabel <- read.table("data/train/y_train.txt")
table(trainLabel)
trainSubject <- read.table("data/train/subject_train.txt")
testData <- read.table("data/test/X_test.txt")
testLabel <- read.table("data/test/y_test.txt")
table(testLabel)
testSubject <- read.table("data/test/subject_test.txt")
#Merge the training and the test sets
joinData <- rbind(trainData, testData)
joinLabel <- rbind(trainLabel, testLabel)
joinSubject <- rbind(trainSubject, testSubject)
#Step 2: Extracts only the measurements on the mean and standard deviation for each measurement.
#Read the features.txt file.
features <- read.table("data/features.txt")
#Subset only measurements for the mean and standard deviation.
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", features[, 2])
length(meanStdIndices)
joinData <- joinData[, meanStdIndices]
names(joinData) <- gsub("\\(\\)", "", features[meanStdIndices, 2])
names(joinData) <- gsub("mean", "Mean", names(joinData))
names(joinData) <- gsub("std", "Std", names(joinData))
names(joinData) <- gsub("-", "", names(joinData))
#Step 3:Uses descriptive activity names to name the activities in the data set.
#Read activity_labels.txt file to add descriptive names to the activities.
activity <- read.table("./data/activity_labels.txt")
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinLabel[, 1], 2]
#Merge activity labels.
joinLabel[, 1] <- activityLabel
names(joinLabel) <- "activity"
# Step 4: Appropriately labels the data set with descriptive activity names.
names(joinSubject) <- "subject"
Processed_Data <- cbind(joinSubject, joinLabel, joinData)
# Store the preliminary processed dataset
write.csv(Processed_Data, "Data_after_merging.csv")
#Step 5:Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
subjectLen <- length(table(joinSubject))
activityLen <- dim(activity)[1]
columnLen <- dim(cleanedData)[2]
tidy_dataset <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
tidy_dataset <- as.data.frame(tidy_dataset)
colnames(tidy_dataset) <- colnames(cleanedData)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
tidy_dataset[row, 1] <- sort(unique(joinSubject)[, 1])[i]
tidy_dataset[row, 2] <- activity[j, 2]
bool1 <- i == cleanedData$subject
bool2 <- activity[j, 2] == cleanedData$activity
tidy_dataset[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
write.csv(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv")
#Formatting data
names(joinData) <- gsub("\\(\\)", "", features[meanStdIndices, 2])
names(joinData) <- gsub("mean", "Mean", names(joinData))
names(joinData) <- gsub("std", "Std", names(joinData))
names(joinData) <- gsub("-", "", names(joinData))
#Step 3:Uses descriptive activity names to name the activities in the data set.
#Read activity_labels.txt file to add descriptive names to the activities.
activity <- read.table("./data/activity_labels.txt")
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinLabel[, 1], 2]
#Merge activity labels.
joinLabel[, 1] <- activityLabel
names(joinLabel) <- "activity"
# Step 4: Appropriately labels the data set with descriptive activity names.
names(joinSubject) <- "subject"
Processed_Data <- cbind(joinSubject, joinLabel, joinData)
# Store the preliminary processed dataset
write.csv(Processed_Data, "Data_after_merging.csv")
#Step 5:Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#Step 5:Creates a second, independent tidy data set with the average of each variable for each activity and each subject.
subjectLen <- length(table(joinSubject))
activityLen <- dim(activity)[1]
columnLen <- dim(Processed_Data)[2]
tidy_dataset <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
tidy_dataset <- as.data.frame(tidy_dataset)
colnames(tidy_dataset) <- colnames(Processed_Data)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
tidy_dataset[row, 1] <- sort(unique(joinSubject)[, 1])[i]
tidy_dataset[row, 2] <- activity[j, 2]
bool1 <- i == Processed_Data$subject
bool2 <- activity[j, 2] == Processed_Data$activity
tidy_dataset[row, 3:columnLen] <- colMeans(Processed_Data[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
write.csv(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv")
library(reshape2)
clean.file <- "cleaned.txt"
extracted.features <- c(1, 2, 3, 4, 5, 6, 41, 42, 43, 44, 45, 46, 81, 82, 83, 84, 85, 86, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166, 201, 202, 214, 215, 227, 228, 240, 241, 253, 254, 266, 267, 268, 269, 270, 271, 345, 346, 347, 348, 349, 350, 424, 425, 426, 427, 428, 429, 503, 504, 516, 517, 529, 530, 542, 543)
extracted.feature.names <- c("tBodyAcc-mean()-X", "tBodyAcc-mean()-Y", "tBodyAcc-mean()-Z", "tBodyAcc-std()-X", "tBodyAcc-std()-Y", "tBodyAcc-std()-Z", "tGravityAcc-mean()-X", "tGravityAcc-mean()-Y", "tGravityAcc-mean()-Z", "tGravityAcc-std()-X", "tGravityAcc-std()-Y", "tGravityAcc-std()-Z", "tBodyAccJerk-mean()-X", "tBodyAccJerk-mean()-Y", "tBodyAccJerk-mean()-Z", "tBodyAccJerk-std()-X", "tBodyAccJerk-std()-Y", "tBodyAccJerk-std()-Z", "tBodyGyro-mean()-X", "tBodyGyro-mean()-Y", "tBodyGyro-mean()-Z", "tBodyGyro-std()-X", "tBodyGyro-std()-Y", "tBodyGyro-std()-Z", "tBodyGyroJerk-mean()-X", "tBodyGyroJerk-mean()-Y", "tBodyGyroJerk-mean()-Z", "tBodyGyroJerk-std()-X", "tBodyGyroJerk-std()-Y", "tBodyGyroJerk-std()-Z", "tBodyAccMag-mean()", "tBodyAccMag-std()", "tGravityAccMag-mean()", "tGravityAccMag-std()", "tBodyAccJerkMag-mean()", "tBodyAccJerkMag-std()", "tBodyGyroMag-mean()", "tBodyGyroMag-std()", "tBodyGyroJerkMag-mean()", "tBodyGyroJerkMag-std()", "fBodyAcc-mean()-X", "fBodyAcc-mean()-Y", "fBodyAcc-mean()-Z", "fBodyAcc-std()-X", "fBodyAcc-std()-Y", "fBodyAcc-std()-Z", "fBodyAccJerk-mean()-X", "fBodyAccJerk-mean()-Y", "fBodyAccJerk-mean()-Z", "fBodyAccJerk-std()-X", "fBodyAccJerk-std()-Y", "fBodyAccJerk-std()-Z", "fBodyGyro-mean()-X", "fBodyGyro-mean()-Y", "fBodyGyro-mean()-Z", "fBodyGyro-std()-X", "fBodyGyro-std()-Y", "fBodyGyro-std()-Z", "fBodyAccMag-mean()", "fBodyAccMag-std()", "fBodyBodyAccJerkMag-mean()", "fBodyBodyAccJerkMag-std()", "fBodyBodyGyroMag-mean()", "fBodyBodyGyroMag-std()", "fBodyBodyGyroJerkMag-mean()", "fBodyBodyGyroJerkMag-std()")
activities <- c(1, 2, 3, 4, 5, 6)
activity.names <- c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING")
# A helper method for printing to the console.
p <- function(...) {
cat("[run_analysis.R]", ..., "\n")
}
# Makes a features filename given a dataset name.
features.file <- function(name) {
paste("X_", name, ".txt", sep = "")
}
# Makes an activities filename given a dataset name.
activities.file <- function(name) {
paste("Y_", name, ".txt", sep = "")
}
# Makes a subjects filename given a dataset name.
subjects.file <- function(name) {
paste("subject_", name, ".txt", sep = "")
}
# Returns an interim dataframe for a single dataset.
get.data <- function(dir, name) {
# Setup the file paths.
real.dir <- file.path(dir, name)
features.name <- file.path(real.dir, features.file(name))
activities.name <- file.path(real.dir, activities.file(name))
subjects.name <- file.path(real.dir, subjects.file(name))
p("Getting dataset:", real.dir)
# Read the features table.
p("  reading features...")
features.t <- read.table(features.name)[extracted.features]
names(features.t) <- extracted.feature.names
clean.data <- features.t
# Read the activities list.
p("  reading activities...")
activities.t <- read.table(activities.name)
names(activities.t) <- c("activity")
activities.t$activity <- factor(activities.t$activity, levels = activities, labels = activity.names)
clean.data <- cbind(clean.data, activity = activities.t$activity)
# Read the subjects list.
p("  reading subjects...")
subjects.t <- read.table(subjects.name)
names(subjects.t) <- c("subject")
clean.data <- cbind(clean.data, subject = subjects.t$subject)
# Return the clean data
clean.data
}
run.analysis <- function(dir) {
p("Getting and Cleaning Data Project")
p("Author: William Bowers")
p("---")
p("Starting up.")
p("Preparing to run analysis.")
# Read the data.
p("Reading datasets.")
test <- get.data(dir, "test")
train <- get.data(dir, "train")
# Join the data.
p("Joining datasets.")
all.data <- rbind(test, train)
# Reshape the data.
p("Melting.")
all.data.long <- melt(all.data, id = c("subject", "activity"))
p("Dcasting.")
all.data.wide <- dcast(all.data.long, subject + activity ~ variable, mean)
# Set the clean data.
all.data.clean <- all.data.wide
# Save the clean data.
clean.file.name <- file.path(dir, clean.file)
p("Saving clean data to:", clean.file.name)
write.table(all.data.clean, clean.file.name, row.names = FALSE, quote = FALSE)
}
run.analysis("data")
file <- "data.zip"
url
trainData <- read.table("data/train/X_train.txt")
trainLabel <- read.table("data/train/y_train.txt")
table(trainLabel)
trainSubject <- read.table("data/train/subject_train.txt")
testData <- read.table("data/test/X_test.txt")
testLabel <- read.table("data/test/y_test.txt")
table(testLabel)
testSubject <- read.table("data/test/subject_test.txt")
#Merge the training and the test sets
joinData <- rbind(trainData, testData)
joinLabel <- rbind(trainLabel, testLabel)
joinSubject <- rbind(trainSubject, testSubject)
View(joinSubject)
rm(list=ls(all=TRUE))
system('clear')
clear
clear()
trainData <- read.table("data/train/X_train.txt")
trainLabel <- read.table("data/train/y_train.txt")
table(trainLabel)
trainSubject <- read.table("data/train/subject_train.txt")
testData <- read.table("data/test/X_test.txt")
testLabel <- read.table("data/test/y_test.txt")
table(testLabel)
testSubject <- read.table("data/test/subject_test.txt")
joinData <- rbind(trainData, testData)
joinLabel <- rbind(trainLabel, testLabel)
joinSubject <- rbind(trainSubject, testSubject)
features <- read.table("data/features.txt")
meanStdIndices <- grep("mean\\(\\)|std\\(\\)", features[, 2])
meanStdIndices
length(meanStdIndices)
joinData <- joinData[, meanStdIndices]
names(joinData) <- gsub("\\(\\)", "", features[meanStdIndices, 2])
names(joinData) <- gsub("mean", "Mean", names(joinData))
names(joinData) <- gsub("std", "Std", names(joinData))
names(joinData) <- gsub("-", "", names(joinData))
names(joindata)
rownames(joindata)
joindata
View(joinData)
activity <- read.table("data/activity_labels.txt")
activity[, 2] <- tolower(gsub("_", "", activity[, 2]))
substr(activity[2, 2], 8, 8) <- toupper(substr(activity[2, 2], 8, 8))
substr(activity[3, 2], 8, 8) <- toupper(substr(activity[3, 2], 8, 8))
activityLabel <- activity[joinLabel[, 1], 2]
#Merge activity labels.
joinLabel[, 1] <- activityLabel
names(joinLabel) <- "activity"
View(joinLabel)
View(joinSubject)
names(joinSubject) <- "subject"
Processed_Data <- cbind(joinSubject, joinLabel, joinData)
View(Processed_Data)
write.csv(Processed_Data, "Data_after_merging.csv")
subjectLen <- length(table(joinSubject))
activityLen <- dim(activity)[1]
activityLen
subjectLen
columnLen <- dim(cleanedData)[2]
dim(cleanedData)
dim(ProcessedData)
dim(Processed_Data)
columnLen <- dim(Processed_Data)[2]
tidy_dataset <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
tidy_dataset <- as.data.frame(tidy_dataset)
View(tidy_dataset)
colnames(tidy_dataset) <- colnames(Processed_Data)
View(tidy_dataset)
View(tidy_dataset)
is.matrix(tidy_dataset)
View(Processed_Data)
View(Processed_Data)
neo_Processed_Data=Processed_Data[ order(-Processed_Data[,1], Processed_Data[,2]), ]
View(neo_Processed_Data)
neo_Processed_Data=Processed_Data[ order(Processed_Data[,1], Processed_Data[,2]), ]
View(neo_Processed_Data)
View(tidy_dataset)
is.matrix(neo_prcessed_data)
is.matrix(neo_prcessed_Data)
is.matrix(neo_processed_Data)
is.matrix(neo_Processed_Data)
is.data_frame(neo_Processed_Data)
if (exists(neo_Processed_Data)) is.data.frame(neo_Processed_Data) else FALSE
is.data.frame(neo_Processed_Data)
is.data.frame(Processed_Data)
length(mjoindata)
length(joindata)
length(joinData)
dim(joinData)[2]
dim(joinData)[1]
2:45
2!=3
View(tidy_dataset)
View(neo_Processed_Data)
neo_Processed_Data[i,1]
i=90
neo_Processed_Data[i,1]
neo_Processed_Data[i,2]
neo_Processed_Data[i,2]=="sitting"
neo_Processed_Data[i,3:5]
i
i=1
neo_Processed_Data[i,3:5]
View(neo_Processed_Data)
View(neo_Processed_Data)
mean()
mean(neo_Processed_Data[i-1,2])
mean(neo_Processed_Data[i-1,3])
mean(neo_Processed_Data[1:10,3])
mean(neo_Processed_Data[1:1,3])
mean(neo_Processed_Data[1:10,3:68])
neo_Processed_Data[1,3:68]
mean(neo_Processed_Data[1,3:68])
mean(neo_Processed_Data[1,3:5])
c=mean(neo_Processed_Data[1,3:5])
c=neo_Processed_Data[1,3:5]
c
as.matrix(c)
mean(as.matrix(c))
mean(as.matrix(neo_Processed_Data[1,3:5]))
mean(as.matrix(neo_Processed_Data[1:10,3]))
mean(as.matrix(neo_Processed_Data[1:10,3:5]))
colMeans(as.matrix(neo_Processed_Data[1:10,3:5]))
0.29093980   -0.01767805   -0.10754603
0.165715/3
0.1657157/3
colMeans(as.matrix(neo_Processed_Data[1:10,3:5]))
for(i in 2:dim(joinData)[1]){}
i
for(i in 2:dim(joinData)[1]) {
if ((neo_Processed_Data[i-1,1] != neo_Processed_Data[i,1]) && (neo_Processed_Data[i-1,2]!=neo_Processed_Data[i,2])){
tidy_dataset[row,2]=neo_Processed_Data[i-1,2]
tidy_dataset[row,1]=neo_Processed_Data[i-1,1]
tidy_dataset[row,3:columnLen]=colMeans(as.matrix(neo_Processed_Data[prev_ind:i-1,3:columnLen]))
prev_ind=i
row=row+1
}
}
tidy_dataset <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
tidy_dataset <- as.data.frame(tidy_dataset)
colnames(tidy_dataset) <- colnames(Processed_Data)
neo_Processed_Data=Processed_Data[ order(Processed_Data[,1], Processed_Data[,2]), ]
row <- 1
prev_ind<-1
for(i in 2:dim(joinData)[1]) {
if ((neo_Processed_Data[i-1,1] != neo_Processed_Data[i,1]) && (neo_Processed_Data[i-1,2]!=neo_Processed_Data[i,2])){
# tidy_dataset[row,2]=neo_Processed_Data[i-1,2]
#  tidy_dataset[row,1]=neo_Processed_Data[i-1,1]
# tidy_dataset[row,3:columnLen]=colMeans(as.matrix(neo_Processed_Data[prev_ind:i-1,3:columnLen]))
prev_ind=i
row=row+1
}
}
row
for(i in 2:dim(joinData)[1]) {
if ((neo_Processed_Data[i-1,1] != neo_Processed_Data[i,1]) || (neo_Processed_Data[i-1,2]!=neo_Processed_Data[i,2])){
# tidy_dataset[row,2]=neo_Processed_Data[i-1,2]
#  tidy_dataset[row,1]=neo_Processed_Data[i-1,1]
# tidy_dataset[row,3:columnLen]=colMeans(as.matrix(neo_Processed_Data[prev_ind:i-1,3:columnLen]))
prev_ind=i
row=row+1
}
}
row
row=1
row <- 1
prev_ind<-1
for(i in 2:dim(joinData)[1]) {
if (neo_Processed_Data[i-1,2]!=neo_Processed_Data[i,2]){
# tidy_dataset[row,2]=neo_Processed_Data[i-1,2]
#  tidy_dataset[row,1]=neo_Processed_Data[i-1,1]
# tidy_dataset[row,3:columnLen]=colMeans(as.matrix(neo_Processed_Data[prev_ind:i-1,3:columnLen]))
prev_ind=i
row=row+1
}
}
row
neo_Processed_Data[prev_ind,2]
neo_Processed_Data[prev_ind-1,2]
neo_Processed_Data[prev_ind,1]
neo_Processed_Data[prev_ind-1,1]
subjectLen <- length(table(joinSubject))
activityLen <- dim(activity)[1]
columnLen <- dim(Processed_Data)[2]
tidy_dataset <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
tidy_dataset <- as.data.frame(tidy_dataset)
colnames(tidy_dataset) <- colnames(Processed_Data)
neo_Processed_Data=Processed_Data[ order(Processed_Data[,1], Processed_Data[,2]), ]
row <- 1
prev_ind<-1
for(i in 2:dim(joinData)[1]) {
if (neo_Processed_Data[i-1,2]!=neo_Processed_Data[i,2]){
tidy_dataset[row,2]=neo_Processed_Data[i-1,2]
tidy_dataset[row,1]=neo_Processed_Data[i-1,1]
tidy_dataset[row,3:columnLen]=colMeans(as.matrix(neo_Processed_Data[prev_ind:i-1,3:columnLen]))
prev_ind=i
row=row+1
}
}
View(tidy_dataset)
View(tidy_dataset)
row
dim(joinData)[1]
tidy_dataset[row,2]=neo_Processed_Data[dim(joinData)[1],2]
tidy_dataset[row,1]=neo_Processed_Data[dim(joinData)[1],1]
tidy_dataset[row,3:columnLen]=colMeans(as.matrix(neo_Processed_Data[prev_ind:dim(joinData)[1],3:columnLen]))
write.csv(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv")
runanalysis.R
run_analysis.R
("run_analysis.R")
("run_analysis.R")
source("run_analysis.R")
run_analysis()
data <-read.csv("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv")
write.csv(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",row.names=NULL,header=T)
write.csv(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",row.names=NULL)
data <-read.csv("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",sep=",",row.names=NULL,header=T)
source("run_analysis.R")
run_analysis()
data <-read.csv("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",sep=",",row.names=NULL,header=T)
View(data)
View(data)
print("fvdgbgb")
source("run_analysis.R")
run_analysis()
write.csv(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",row.name=FALSE)
write.csv(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",row.nameS=FALSE)
write.table(tidy_dataset, "Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",row.name=FALSE)
data <-read.table("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",row.name=FALSE)
data <-read.table("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",row.names=FALSE)
data <-read.table("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv")
View(data)
View(data)
data <-read.table("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",header=T)
View(data)
View(data)
data <-read.table("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",header=T)
source("run_analysis.R")
run_analysis()
data <-read.table("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.csv",header=T)
View(data)
View(data)
source("run_analysis.R")
run_analysis()
source("run_analysis.R")
run_analysis()
data <-read.table("Tidy_dataset_with_average_of_each_variable_for_each_activity_and_each_subject.txt",header=T)
setwd("C:\\Users\\abbuma\\Desktop\\Exploratory Data")
C:\Users\abbuma\Desktop\Exploratory Data
#Author: Minhazul Islam Sk
#Subset the data from the dates 2007-02-01 and 2007-02-02 from the whole dataset
data <- subset(data,
polt1.R
colClasses = c('character', 'character', 'numeric',
'numeric', 'numeric', 'numeric',
'numeric', 'numeric', 'numeric'),
na.strings='?')
#Convert the Date and Time variables to Date/Time classes in R
data$DateTime <- strptime(paste(data$Date, data$Time),
"%d/%m/%Y %H:%M:%S")
#Subset the data from the dates 2007-02-01 and 2007-02-02 from the whole dataset
data <- subset(data,
as.Date(DateTime) >= as.Date("2007-02-01") &
as.Date(DateTime) <= as.Date("2007-02-02"))
# Initializing the plot1.png
png("plot1.png", height=480, width=480)
# Plotting the  histogram
hist(data$Global_active_power, col='red',
xlab = 'Global Active Power (kilowatts)',
main = 'Global Active Power')
# Close the "plot1.png" file
dev.off()
